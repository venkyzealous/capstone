--creating intermediate tables

--table for storing statistics
CREATE TABLE IF NOT EXISTS TXN_STATS_STG(
 card_id string,
 moving_average double,
 std_dev double
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';

--table for storing last transaction detail
CREATE TABLE IF NOT EXISTS TXN_LAST_DETAIL_STG(
 card_id string,
 postcode string,
 transaction_dt bigint
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';

--table for consolidating all card details
CREATE TABLE IF NOT EXISTS TXN_FINAL_STG(
 card_id string,
 moving_average double,
 std_dev double,
 postcode string,
 transaction_dt bigint,
 score int,
 member_id string,
 member_joining_dt string,
 card_purchase_dt string,
 country string,
 city string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';


--processing of data for analysis


--moving average and standard deviation calculation from top 10 transactions
-- lookup_txn_master stores last 10 transactions
-- if less than ten, average gets calculated for available transactions

TRUNCATE TABLE TXN_STATS_STG;

INSERT INTO TXN_STATS_STG
SELECT card_id, AVG(amount),stddev_pop(amount) FROM LOOKUP_TXN_MASTER
GROUP BY card_id;


--lookup_txn_master contains rank of transactions alongside transaction
--rank is used to find the last transaction

TRUNCATE TABLE TXN_LAST_DETAIL_STG;

INSERT INTO TXN_LAST_DETAIL_STG 
SELECT card_id,postcode,transaction_dt
FROM LOOKUP_TXN_MASTER
where txrank = 1;


--consolidation of all information into final table
-- simplifying into multiple stages makes query processing faster 
-- and maintainable

TRUNCATE TABLE TXN_FINAL_STG;

INSERT INTO TXN_FINAL_STG(card_id,moving_average,std_dev,
postcode,transaction_dt,score,member_id,member_joining_dt,card_purchase_dt,country,city)
SELECT S.card_id, S.moving_average, S.std_dev,
L.postcode,L.transaction_dt,MS.score,CM.member_id,CM.member_joining_dt,CM.card_purchase_dt,CM.country,CM.city FROM
TXN_STATS_STG S LEFT JOIN TXN_LAST_DETAIL_STG L
ON S.card_id = L.card_id
LEFT JOIN card_member CM
ON S.card_id = CM.card_id
LEFT JOIN member_score MS ON
CM.member_id = MS.member_id



--output processed data (card details, ucl, zipcode, transaction_dt, score, member details) to hbase

TRUNCATE TABLE LOOKUP_CARD_MEMBER;

INSERT INTO LOOKUP_CARD_MEMBER
SELECT card_id,(3*std_dev + moving_average), postcode,
transaction_dt,score,member_id,member_joining_dt, card_purchase_dt,country,city FROM
TXN_FINAL_STG;